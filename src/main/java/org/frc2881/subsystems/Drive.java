// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.frc2881.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import org.frc2881.commands.basic.drive.DriveWithJoysticks;

import edu.wpi.first.wpilibj.SendableBase;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SendableBuilder;

/**
 *
 */
public class Drive extends Subsystem {

    public static final String IntakeLocation = null;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax leftFront;
    private CANSparkMax leftBack;
    private SpeedControllerGroup left;
    private CANSparkMax rightFront;
    private CANSparkMax rightBack;
    private SpeedControllerGroup right;
    private DifferentialDrive differentialDrive;
    


    
    public Drive() {
        leftFront = new CANSparkMax(1, MotorType.kBrushless);
        addChild("Left Front",leftFront);
        leftFront.setInverted(false);
        
        leftBack = new CANSparkMax(2, MotorType.kBrushless);
        addChild("Left Back",leftBack);
        leftBack.setInverted(false);
        
        left = new SpeedControllerGroup(leftFront, leftBack  );
        addChild("Left",left);
        
        
        rightFront = new CANSparkMax(3, MotorType.kBrushless);
        addChild("Right Front",rightFront);
        rightFront.setInverted(false);
        
        rightBack = new CANSparkMax(4, MotorType.kBrushless);
        addChild("Right Back",rightBack);
        rightBack.setInverted(false);
        
        right = new SpeedControllerGroup(rightFront, rightBack  );
        addChild("Right",right);
        
        
        differentialDrive = new DifferentialDrive(left, right);
        addChild("Differential Drive",differentialDrive);
        differentialDrive.setSafetyEnabled(true);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

        

    }

    @Override
    public void initDefaultCommand() {

        setDefaultCommand(new DriveWithJoysticks());

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

	public double getLeftDistance() {
		return 0;
	}

	public double getRightDistance() {
		return 0;
	}


    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    private void addChild(String name, CANSparkMax spark) {
        addChild(name, new SendableBase() {
            public void initSendable(SendableBuilder builder) {
                builder.setSmartDashboardType("Speed Controller");
                builder.setActuator(true);
                builder.setSafeState(spark::disable);
                builder.addDoubleProperty("Value", spark::get, spark::set);
            }
        });
    }

}

