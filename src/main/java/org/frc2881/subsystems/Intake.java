// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.frc2881.subsystems;

import org.frc2881.commands.scoring.cargo.CargoIntake;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Intake extends Subsystem {

    private final PowerDistributionPanel pdp = new PowerDistributionPanel(10);
    private Solenoid cargoSuctionCupSolenoid;
    private Solenoid cargoGripperSolenoid;
    private Solenoid cargoIntakePlanBSolenoid;
    private Solenoid wristSolenoid;
    private Ultrasonic cargoDistanceEcholocation;
    private Spark cargoIntakeMotor;
    private int intakecargoRollerPdpChannel = 1;
    private Solenoid hPSuctionCupSolenoid;
    private Solenoid hPGripperSolenoid;
    private Solenoid hPIntakePlanBSolenoid;
    private Ultrasonic hPDistanceEcholocation;
    private Spark hPIntakeMotor;

    private int intakeHPRollerPdpChannel = 1;

    public Intake() {
        cargoSuctionCupSolenoid = new Solenoid(0, 1);
        addChild("cargo Suction Cup Solenoid",cargoSuctionCupSolenoid);
        
        
        cargoGripperSolenoid = new Solenoid(0, 2);
        addChild("cargo Gripper Solenoid",cargoGripperSolenoid);
        
        
        cargoIntakePlanBSolenoid = new Solenoid(0, 3);
        addChild("cargo Intake Plan B Solenoid",cargoIntakePlanBSolenoid);
        
        
        
        cargoDistanceEcholocation = new Ultrasonic(4, 5);
        addChild("cargo Distance Echolocation",cargoDistanceEcholocation);
        
        
        hPDistanceEcholocation = new Ultrasonic(4, 5);
        addChild("HP Distance Echolocation",hPDistanceEcholocation);
        
        
        hPIntakeMotor = new Spark(3);
        addChild("HP Intake Motor",hPIntakeMotor);
        hPIntakeMotor.setInverted(false);

        cargoIntakeMotor = new Spark(4);
        addChild("Cargo Intake Motor",cargoIntakeMotor);
        cargoIntakeMotor.setInverted(false);
        

    }

    @Override
    public void initDefaultCommand() {
        setDefaultCommand(new CargoIntake());
    }

    public void suction() {

        hPSuctionCupSolenoid.set(!hPSuctionCupSolenoid.get());

    }

    public void setSuctionState(boolean state){

        hPSuctionCupSolenoid.set(state);

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    public double getCargoRollerCurrent(){
        return pdp.getCurrent(intakecargoRollerPdpChannel);
    }

    public void cargoRollers(double speed) {
        cargoIntakeMotor.set(speed);
    }

    public boolean getCargoRollers(){
        return (cargoIntakeMotor.get() >= 0.05);
    }

    //Stops the rollers (put at the end of the command)
    public void stopCargoRollers() {
        cargoIntakeMotor.set(0);
    }

    public double getHPRollerCurrent(){
        return pdp.getCurrent(intakeHPRollerPdpChannel);
    }

    public void HPRollers(double speed) {
        hPIntakeMotor.set(speed);
    }

    public boolean getHPRollers(){
        return (hPIntakeMotor.get() >= 0.05);
    }

    //Stops the rollers (put at the end of the command)
    public void stopHPRollers() {
        hPIntakeMotor.set(0);
    }
}
