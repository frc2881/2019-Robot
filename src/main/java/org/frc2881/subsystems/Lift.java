// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.frc2881.subsystems;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;

import org.frc2881.commands.scoring.lift.LiftControl;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class Lift extends PIDSubsystem {

    public static double LOW_PLATFORM_HEIGHT = 1;
    public static double HIGH_PLATFORM_HEIGHT = 2;

    private Encoder liftEncoderLeft;
    private Encoder liftEncoderRight;
    private Spark liftMotorLeft;
    private Spark liftMotorRight;
    private Spark liftCrawler;

    // Initialize your subsystem here
    public Lift() {
        super("Lift", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        getPIDController().setName("Lift", "PIDSubsystem Controller");
        LiveWindow.add(getPIDController());

        liftEncoderLeft = new Encoder(0, 1, false, EncodingType.k4X);
        addChild("Lift Encoder Left",liftEncoderLeft);
        liftEncoderLeft.setDistancePerPulse(1.0);
        liftEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
        
        liftEncoderRight = new Encoder(2, 3, false, EncodingType.k4X);
        addChild("Lift Encoder Right",liftEncoderRight);
        liftEncoderRight.setDistancePerPulse(1.0);
        liftEncoderRight.setPIDSourceType(PIDSourceType.kRate);
        
        liftMotorLeft = new Spark(2);
        addChild("Lift Motor Left",liftMotorLeft);
        liftMotorLeft.setInverted(false);
        
        liftMotorRight = new Spark(1);
        addChild("Lift Motor Right",liftMotorRight);
        liftMotorRight.setInverted(false);
        
        liftCrawler = new Spark(5);
        addChild("Lift Crawler",liftCrawler);
        liftCrawler.setInverted(false);

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    @Override
    public void initDefaultCommand() {
        
    }

    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        return liftEncoderLeft.pidGet();

    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        liftMotorLeft.pidWrite(output);

    }

    public void setLiftLeft(double speed){
        liftMotorLeft.setSpeed(speed);
    }
    
    public void setLiftRight(double speed){
        liftMotorRight.setSpeed(speed);
    }

	public void setLiftCrawler(double speed) {
        liftCrawler.set(speed);
	}
}
