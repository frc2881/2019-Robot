// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.frc2881.commands.basic.drive;

import edu.wpi.first.wpilibj.command.Command;
import org.frc2881.Robot;

/**
 *
 */
public class DriveForwardForDistance extends Command {

  private double speedSole = 0.58;
    private double distance;

    public DriveForwardForDistance(double distance) {
        super(computeTimeout(distance));
        requires(Robot.drive);
        this.distance = distance;
    }

    private static double computeTimeout(double distance) {
        //Give the robot 1 second to get started then assume it travels at 3 ft/second (in practice it's faster)
        return 1.0 + (Math.abs(distance) / 3.0);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        //Make a call to the subsystem to use a PID loop controller in the subsystem
        //to set the heading based on the angle passed into the method.
        Robot.log("Autonomous driving " + distance + " ft: " + Robot.drive.getLocation());
        Robot.drive.initializeDriveForward(distance, 0);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {

        //write pidloop to run for x distance
        double speedl = Robot.drive.getLeftDistance();

        double speedr = Robot.drive.getRightDistance();

    /*    //Calls to the subsystem to update the angle if controller value has changed
        double speed = Robot.drive.getStraightSpeed();

        //So DriveForward won't time out (it goes backwards fast enough to make a difference)
        if(Math.abs(speed) < speedSole) {
            speed = Math.copySign(speedSole, speed);
        }

        double rotate = Robot.drive.getRotateToAngleRate();
        Robot.drive.autonomousArcadeDrive(speed, rotate);
        //Robot.driveSubsystem.arcadeDrive(speed,speed);
        //Robot.log("set speed to " + speed); */
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
      /*  if (isTimedOut()) {
            Robot.log("Drive forward timed out:" + Robot.drive.getLocation());
            return true;
        }
        //asking the PID loop have we reached our position
        return Robot.drive.isFinishedDriveForward(); */
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        /*
        //call the drive subsystem to make sure the PID loop is disabled
        Robot.drive.endDriveForward();
        Robot.log("Drive Forward has ended: " + Robot.drive.getLocation()); */
    }

    //This method allows us to make changes to the property this.distance in Shuffleboard
    //It is called automatically when you call SmartDashboard.putData() in OI.java.

    /*
    public void initSendable(SendableBuilder builder) {
        super.initSendable(builder);
        builder.addDoubleProperty("Drive Forward Distance", () -> distance, (distance) -> this.distance = distance);
        */
    }
}
