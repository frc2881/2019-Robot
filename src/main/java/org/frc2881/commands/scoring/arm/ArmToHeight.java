// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.frc2881.commands.scoring.arm;

import edu.wpi.first.wpilibj.command.Command;
import org.frc2881.Robot;
import org.frc2881.commands.basic.rumble.RumbleYes;
import org.frc2881.subsystems.Arm;
import org.frc2881.subsystems.Arm.ArmValue;
import org.frc2881.subsystems.Intake.SuctionState;

/**
 *
 */
public class ArmToHeight extends Command {

    //Code something that doesn't use pid controller and mannually ramps motor speed and compares to potentiometer/encoder value with speed min
    
    private double height;
    private double initial;
    private boolean rumble;
    private ArmValue goal;
    private double setpoint;

    public ArmToHeight(ArmValue goal, double height, boolean rumble) {
        requires(Robot.arm);
        this.height = height;
        this.rumble = rumble;
        this.goal = goal;
    }

    @Override
    protected void initialize() {
        boolean highGoal = height == Arm.HIGH_GOAL;
        boolean mediumGoal = height == Arm.MEDIUM_GOAL;
        boolean lowGoal = height == Arm.LOW_GOAL;
        //boolean HPLoaded = Robot.intake.getSuctionState() == SuctionState.CLOSED;

        /*
        if (goal == ArmValue.BUTTON){
            if (!HPLoaded) {
                if (highGoal) {
                    setpoint = (Arm.CARGO_HIGH_GOAL_HEIGHT);
                } else if (mediumGoal) {
                    setpoint = (Arm.CARGO_MEDIUM_GOAL_HEIGHT);
                } else if (lowGoal) {
                    setpoint = (Arm.CARGO_LOW_GOAL_HEIGHT);
                }
            } else {
                if (highGoal) {
                    setpoint = (Arm.HP_HIGH_GOAL_HEIGHT);
                } else if (mediumGoal) {
                    setpoint = (Arm.HP_MEDIUM_GOAL_HEIGHT);
                } else if (lowGoal) {
                    setpoint = (Arm.HP_LOW_GOAL_HEIGHT);
                }  
                else {
                    setpoint = (height);
                }
            }
        }
        else {
            setpoint = (height);
        }
        */

        Robot.logInitialize(this, setpoint);

        initial = Robot.arm.getArmEncoderHeight();
    }

    @Override
    protected void execute(){
        Robot.arm.armToHeight(setpoint);
    }
    
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        double currentHeight = Robot.arm.getArmEncoderHeight();

        if(goal == ArmValue.BUTTON) {
            return false;
        }

        if (initial < setpoint - 0.5) {
			return currentHeight >= setpoint;
        }
        else if (initial > setpoint + 0.5){
            return Math.abs(currentHeight - setpoint) <= 0.5;
        }
        else {
            return true;
        }
    }

    @Override
    protected void end() {
        Robot.arm.setArmMotorSpeed(0);
        if (rumble) {
            new RumbleYes(Robot.oi.manipulator).start();
        }
        Robot.logEnd(this);
    }

    @Override
    protected void interrupted() {
        Robot.arm.setArmMotorSpeed(0);
        Robot.logInterrupted(this);
    }

}
